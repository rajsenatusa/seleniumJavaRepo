package Utilities;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelUtility {

	public FileInputStream fi;
	public FileOutputStream fo;
	public XSSFWorkbook workbook;
	public XSSFSheet sheet;
	public XSSFRow row;
	public XSSFCell cell;
	public CellStyle style;   
	String path;
	public static final String RESULTS_FOLDER = "DataDrivenResults";
	public static final String RESULTS_FILE = RESULTS_FOLDER + "/TestResults.xlsx";
	
	public ExcelUtility(String path) {
        this.path = path;
        try {
            FileInputStream fis = new FileInputStream(path);
            this.workbook = new XSSFWorkbook(fis); // Load existing workbook
        } catch (FileNotFoundException e) {
            System.err.println("File not found at path: " + path);
            // If file does not exist, create a new workbook
            this.workbook = new XSSFWorkbook(); // Create a new workbook
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
		
	
    public List<Object[]> readData(String sheetName) {
        List<Object[]> data = new ArrayList<>();
        sheet = workbook.getSheet(sheetName);

        for (Row row : sheet) {
            int lastCell = row.getLastCellNum();
            Object[] rowData = new Object[lastCell];
            for (int i = 0; i < lastCell; i++) {
                Cell cell = row.getCell(i);
                rowData[i] = cell.toString();
            }
            data.add(rowData);
        }

        return data;
    }
    
    public int getNextEmptyRow(String sheetName) {
        sheet = workbook.getSheet(sheetName);
        int lastRowNum = sheet.getLastRowNum();
        return lastRowNum; // Return the next empty row
    }
    
    
    public int getNextEmptyCellInColumn(String sheetName, int columnIndex) {
        sheet = workbook.getSheet(sheetName);
        if (sheet == null) {
            return -1; // Sheet does not exist
        }

        int lastRowNum = sheet.getLastRowNum();
        for (int i = 0; i <= lastRowNum; i++) {
            Row row = sheet.getRow(i);
            if (row == null || row.getCell(columnIndex) == null || row.getCell(columnIndex).getCellType() == CellType.BLANK) {
                return i; // Found an empty cell in the specified column
            }
        }
        return lastRowNum + 1; // Return the next row if all rows are filled
    }
    
	public int getRowCount(String sheetName) throws IOException 
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		int rowcount=sheet.getLastRowNum();
		workbook.close();
		fi.close();
		return rowcount;		
	}
	
	public int getCellCount(String sheetName,int rownum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		int cellcount=row.getLastCellNum();
		workbook.close();
		fi.close();
		return cellcount;
	}
	
	
	public String getCellData(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		DataFormatter formatter = new DataFormatter();
		String data;
		try{
		data = formatter.formatCellValue(cell); //Returns the formatted value of a cell as a String regardless of the cell type.
		}
		catch(Exception e)
		{
			data="";
		}
		workbook.close();
		fi.close();
		return data;
	}
	
	public void setCellData(String sheetName,int rownum,int colnum,String data) throws IOException
	{
		File xlfile=new File(path);
		if(!xlfile.exists())    // If file not exists then create new file
		{
		workbook=new XSSFWorkbook();
		fo=new FileOutputStream(path);
		workbook.write(fo);
		}
				
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
			
		if(workbook.getSheetIndex(sheetName)==-1) // If sheet not exists then create new Sheet
			workbook.createSheet(sheetName);
		sheet=workbook.getSheet(sheetName);
					
		if(sheet.getRow(rownum)==null)   // If row not exists then create new Row
				sheet.createRow(rownum);
		row=sheet.getRow(rownum);
		
		cell=row.createCell(colnum);
		cell.setCellValue(data);
		fo=new FileOutputStream(path);
		workbook.write(fo);		
		workbook.close();
		fi.close();
		fo.close();
	}
	
	
	public void fillGreenColor(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=workbook.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND); 
				
		cell.setCellStyle(style);
		workbook.write(fo);
		workbook.close();
		fi.close();
		fo.close();
	}
	
	
	public void fillRedColor(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=workbook.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.RED.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);  
		
		cell.setCellStyle(style);		
		workbook.write(fo);
		workbook.close();
		fi.close();
		fo.close();
	}
	
// write methods are goes here.
    public void writeCellData(String sheetName, int rowNum, int colNum, String value) {
        try {
            // Get the sheet
            sheet = workbook.getSheet(sheetName);
            if (sheet == null) {
                sheet = workbook.createSheet(sheetName); // Create the sheet if it does not exist
            }

            // Get the row
            Row row = sheet.getRow(rowNum);
            if (row == null) {
                row = sheet.createRow(rowNum); // Create the row if it does not exist
            }

            // Get the cell
            Cell cell = row.createCell(colNum);
            cell.setCellValue(value);

            // Write the data to the file
            try (FileOutputStream fos = new FileOutputStream(path)) {
                workbook.write(fos);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    

    public void close() {
        try {
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


	public void writeResultsToExcel(String username, String password, String firstname, String lastname,
			String phonenumber, String licencenumber, String licensexp, String emailaddress, String manager,
			String roleofuser, String capturedProviderCode) throws FileNotFoundException, IOException {
		
		// Ensure the results folder exists
        File resultsDir = new File(RESULTS_FOLDER);
        if (!resultsDir.exists()) {
            resultsDir.mkdirs();
        }

        Workbook workbook;
        Sheet sheet;

        // Check if the file exists to either create a new workbook or update the existing one
        File file = new File(RESULTS_FILE);
        
        if (file.exists()) {
            workbook = WorkbookFactory.create(file);
            sheet = workbook.getSheetAt(0);
        } else {
            workbook = new XSSFWorkbook();
            sheet = workbook.createSheet("Test Results");
            // Create the header row
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("Username");
            headerRow.createCell(1).setCellValue("Password");
            headerRow.createCell(2).setCellValue("First Name");
            headerRow.createCell(3).setCellValue("Last Name");
            headerRow.createCell(4).setCellValue("Phone Number");
            headerRow.createCell(5).setCellValue("License #");
            headerRow.createCell(6).setCellValue("License Expiration Date");
            headerRow.createCell(7).setCellValue("Email Address");
            headerRow.createCell(8).setCellValue("Manager");
            headerRow.createCell(9).setCellValue("Role");
            headerRow.createCell(10).setCellValue("Producer Code");

        }

	        // Write data to the next available row
	        int rowCount = sheet.getLastRowNum();
	        Row row = sheet.createRow(rowCount + 1);	
	        row.createCell(0).setCellValue(username);
	        row.createCell(1).setCellValue(password);
	        row.createCell(2).setCellValue(firstname);
	        row.createCell(3).setCellValue(lastname);
	        row.createCell(4).setCellValue(phonenumber);
	        row.createCell(5).setCellValue(licencenumber);
	        row.createCell(6).setCellValue(licensexp);
	        row.createCell(7).setCellValue(emailaddress);
	        row.createCell(8).setCellValue(manager);
	        row.createCell(9).setCellValue(roleofuser);
	        row.createCell(10).setCellValue(capturedProviderCode);
       

        // Write the results back to the file
        try (FileOutputStream fos = new FileOutputStream(RESULTS_FILE)) {
            workbook.write(fos);
        }
        workbook.close();
    }
	
	
}


